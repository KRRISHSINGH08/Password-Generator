/* Tip: Use border for styling every element. Better understanding! */
*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'League Spartan', sans-serif;
    color: var(--pl-white);
}

/* Global variables */
:root {

    --dk-violet: hsl(268, 75%, 9%);
    --lt-violet: hsl(268, 47%, 21%);
    --lt-violet2: hsl(281, 89%, 26%);
    --vb-violet: hsl(285, 91%, 52%);
    --vb-violet2: hsl(290, 70%, 36%);

    --vb-yellow: hsl(52, 100%, 62%);


    --pl-white: hsl(0, 0%, 100%);

    --vb-cyan: hsl(176, 100%, 44%);
    --vb-cyan2: hsl(177, 92%, 70%);

    --dk-text: hsl(198, 20%, 13%);
}

body {
    width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;

     /* background: linear-gradient(231deg, rgba(22, 6, 40, 1) 0%, rgba(52, 28, 79, 1) 50%, rgba(88, 7, 125, 1) 100%); */
     background: linear-gradient(to right, #1e130c, #9a8478);
     background: linear-gradient(to right, #948e99, #2e1437); 
     background: linear-gradient(to right, #283048, #859398);
}

/*
-> max-width & max-height 
With max-width and max-height, the container's size adapts to the content size, but it won't exceed 
100% of the viewport width and height. 
*/
.container {
    /* for mobile width will be almost viewport 
       but for big screen it will be 450px */
    width: 90%;
    max-width: 400px;
}


h1 {
    color: var(--pl-white);
    opacity: 0.75;
    text-transform: uppercase;
    text-align: center;
    letter-spacing: 2px;
    line-height: 1.2; /* height above and below text kind of like the padding-up, padding-bottom */
}


.display-container {
    position: relative; /* Overlap input & button */

    background-color: var(--dk-violet);
    border-radius: 1rem;
    border-bottom: 0.35rem solid var(--lt-violet2);
    padding-top: 0.35rem;
    margin: 1rem 0;
/* Note: all value in rem */

    /* display: flex;
    justify-content: space-between; */
}

/* My way! */

/* .display{
    width: 100%;
    padding: 1rem;
    background-color: transparent;
    border: none;
    color: var(--vb-yellow);
    opacity: 0.65;
    font-size: 1.5rem;
    font-weight: bold;
    line-height: 30px;
    pointer-events: none;
}

 .display::placeholder{
    color: var(--vb-yellow);
    opacity: 0.65;
    font-size: 1.5rem;
    font-weight: bold;
    text-transform: uppercase;
    line-height: 30px;
}

button[data-copy] {
    padding-right: 1rem;
    background: transparent;
    border: none;
} */

.display{
    width: 100%; /* || Password with all Uppercase of 20 length. last char will be half visible. || */ 

    background-color: transparent;
    color: var(--vb-yellow);
    opacity: 0.65;
    font-size: 1.5rem;
    font-weight: 600;
    line-height: 30px;
    letter-spacing: 1px;
    padding: 1.15rem 1rem;
    padding-right: 3.25rem;
    border: none;
    pointer-events: none;
}

.display::placeholder{
/* || Note:- These properties cannot be applied on .display class otherwise display container
      will have no dimension because of no content || */
    position: absolute;
    top: 50%;
    left: 1.15rem;
    transform: translateY(-50%); /* center */


    color: var(--vb-yellow);
    opacity: 0.65;
    /* font-size: 1.5rem;  || don't specify again || */
    /* font-weight: bold; */
    text-transform: uppercase;
    line-height: 30px;
}

.copyBtn {
    position: absolute;
    top: 50%;
    right: 1.15rem;
    transform: translateY(-50%);

    background: transparent;
    border: none;
    cursor: pointer;
} 

.tool-tip{
    background-color: var(--vb-violet2);
    color: var(--vb-yellow);
    font-size: 1.25rem;
    
    position: absolute;
    top: -35px;
    left: -25px;
    padding: 5px 10px;
    border-radius: 1rem;
    opacity: 0;
    transform: scale(0);
    transform-origin: bottom;
    transition: all 250ms ease-in-out;
}
.tool-tip.active{
    opacity: 1;
    transform: scale(1);
}

.input-container {
    background-color: var(--dk-violet);
    display: flex;
    flex-direction: column;
    gap: 1rem;
    font-size: 1.2rem;
    padding: 2rem;
    border-radius: 1rem;
    border-bottom: 0.35rem solid var(--lt-violet2);
    
}

.length-container {
/* Note: with display flex inline element take full width of container  */
/* when you apply display: flex to a container that holds inline elements, the inline elements become flex items
   and are treated as if they were block-level elements inside the flex container. */
    display: flex;
    justify-content: space-between;
    /* align-items: center; */
}

.length-container p:nth-child(1) {
    color: var(--pl-white);
    font-size: 1.5rem;
}

.length-container p:nth-child(2){
    color: var(--vb-yellow);
    font-size: 1.5rem;
    font-weight: 600;
}

.check {
    display: flex;
    gap: 1rem;
}

.check label {
    color: var(--pl-white);
    font-size: 1.25rem;
    letter-spacing: 0.75px;
}

.check input {
    appearance: none; /* remove browser default style. Now we cannot tick either || imp! ||*/
    width: 20px;
    height: 20px;
    border: 1px solid var(--vb-cyan);
    border-radius: 0.35rem;
    cursor: pointer;

    position: relative;
}

.check input:checked {
    background-color: var(--vb-cyan);
}

.check input:checked::before{
    content: 'âœ“';

    position: absolute;
    bottom: 0%;
    left: 20%;

    color: var(--dk-text);
    font-size: 1.05rem;
    font-weight: 600;

}

.strength-container {
    display: flex;
    justify-content: space-between;
}


.strength-container div:nth-child(2) {
    width: 1.5rem;
    height: 1.5rem;
    border-radius: 50%;
}

.generate-password {
    padding: 1rem 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--vb-yellow);
    background: var(--vb-violet);
    border-radius: 0.75rem;
    border: none;
    border-bottom: 0.35rem solid var(--vb-yellow);
    letter-spacing: 1px;
    /* text-align: center; */
    text-transform: uppercase;
    cursor: pointer;

}

.slider {
    appearance: none;
/* Imp! */
    background-color: var(--lt-violet);
    background-image: linear-gradient(var(--vb-violet), var(--vb-violet));
    background-repeat: no-repeat;

    color: var(--vb-yellow);
    border-radius:1rem;
    height: 0.75rem;
    margin-top: 2rem;
    margin-bottom: 1.5rem;
    cursor: pointer;
}

/* pseudo element selector to select thumb element */
.slider::-webkit-slider-thumb{
    position: relative; z-index: 1; /*imp!*/
    appearance: none;
    height: 2rem;
    width: 2rem;
    border-radius: 50%;
    background: var(--vb-yellow);
    box-shadow: 0px 0px 20px 0px rgba(255, 229, 61, 0.50);
    transition: all 100ms ease-in;
}

.slider:focus {
    outline: 3px solid var(--vb-yellow);
}

/* IMP */
.slider::-webkit-slider-thumb:hover{
    outline: 2px solid var(--vb-yellow);
    background-color: var(--dk-violet);
    box-shadow: 0px 0px 25px 5px rgba(255, 229, 61, 0.80);
}

/* For firefox */
.slider::-moz-range-thumb{
    position: relative; z-index: 1; /*imp!*/
    appearance: none;
    height: 2rem;
    width: 2rem;
    border-radius: 50%;
    background: var(--vb-yellow);
    box-shadow: 0px 0px 20px 0px rgba(255, 229, 61, 0.50);
    transition: all 100ms ease-in;
}
.slider::-moz-range-thumb:hover{
    outline: 2px solid var(--vb-yellow);
    background-color: var(--dk-violet);
    box-shadow: 0px 0px 25px 5px rgba(255, 229, 61, 0.80);
}